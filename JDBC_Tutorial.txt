JDBC Drivers
----------------------
############################################ Need to cover ###################
Firstly download my sql connector jar


https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.30

right click on your project -> buildpath -> configure build path -> under 'libraries' -> add external jars -> Open the downloaded my-sql-connectoor jar

Steps to connect JDBC
------------------------

Import the required package for the corresponding database.


Load and register the JDBC drivers.
First load then register the same


Establish the connection

Create a statement
Execute the query
Process the results
Close the connections



1)Import JDBC Packages − Add import statements to your Java program to import required classes in your Java code.

2)Register JDBC Driver − This step causes the JVM to load the desired driver implementation into memory so it can f2)2)ulfill your JDBC requests.

3)Database URL Formulation − This is to create a properly formatted address that points to the database to which you wish to connect.

4)Create Connection Object − Finally, code a call to the DriverManager object's getConnection( ) method to establish actual database connection.

5)Closing JDBC Connections

1)Import JDBC Packages
----------------------------------
* The Import statements tell the Java compiler where to find all the required classes for  your code
* These statements are placed at the very beginning of your source code.
* To use the operations like insert, update and delete we need to import the below statements.

import java.sql.* ; 

2)Register JDBC Driver
-------------------------------
JDBC has only the interfaces. The implementation of these interfaces are present in driver class.

So to get all those implementation we need to load/register the driver class. Once we load the driver class then all the implementations are present in memory.

Example:- If you want to connect to MYSQL database you need to load MY SQL driver
          If you want to connect to Oracle database you need to load Oracle driver
		  
		  
Syntax for loading driver class:

try {
   Class.forName("om.mysql.jdbc.Driver");
}
catch(ClassNotFoundException ex) {
   System.out.println("Error: unable to load driver class!");
   System.exit(1);
}

3)Database URL Formulation
------------------------------------------
Every database has a url. To establish a connection with that database we need to have that url

RDBMS	        JDBC driver name	                           URL format
MySQL	         com.mysql.jdbc.Driver	                 jdbc:mysql://hostname:portNumber/ databaseName
ORACLE	         oracle.jdbc.driver.OracleDriver	     jdbc:oracle:thin:@hostname:port Number:databaseName
DB2	             COM.ibm.db2.jdbc.net.DB2Driver	         jdbc:db2:hostname:port Number/databaseName
Sybase	         com.sybase.jdbc.SybDriver	             jdbc:sybase:Tds:hostname: port Number/databaseName


4)Create Connection Object
---------------------------------------
To create connection object we need to use the below syntax

DriverManager.getConnection(url);
DriverManager.getConnection(String url, String user, String password)

Example:
             //jdbc:mysql://hostName:portNumber/dbName
			String dbURL = "jdbc:mysql://127.0.0.1:3306/tharun_db?characterEncoding=latin1";  
			String userName = "root";
			String pwd = "root";
			Connection conn = DriverManager.getConnection(dbURL, userName, pwd);
			
5)closing connections
-----------------------
con.close();


Complete example:-
https://github.com/GirishYarru/udemy_learning/blob/main/institute/Batch2/src/demo/jdbc/TESTMySqlConnection.java

Topic2:-
--------------------
Statements:- Statement interface are used to execute SQL queries in java and receive data from database

There are three statement interfaces:
1)Statement -> sattic SQL queries 
2)PreparedStatement -> 

3)CallableStatement

Statement
-------------
* used to run static SQL commands
* This interface do not accept any input parameters

Syntax to create Statement:
Statement statement = con.createStatement();

Prepared Statement
--------------------------
* This interface accepts input parameters
* When a single SQL query to be executed multiple times with different parameters then use Prepared Statement
* Initially '?' is used in the query and then we need to pass the values for those '?' in java

Example:-
//Syntax to create prepared statement
String sqlQuery = "INSERT INTO tableName(name, age)VALUES(?, ?)";
Statement pstmt = con.prepareStatement(query);

//passing values to '?'
pstmt.setString(1,"Ayan");
ptstmt.setInt(2,25);

https://www.geeksforgeeks.org/types-of-statements-in-jdbc/


Callable Statement
-------------------------
Mainly used to access database stored procedures


To execute the JDBC Statements(Statement,Prepeared Statement, Callable Statement) any of the below methods can be used


1) int executeUpdate (String SQL):
-------------------------------------
* Returns the number of rows affected by the execution of the SQL statement.
* Use this method to execute SQL statements for which you expect to get a number of rows affected - for example, an INSERT, UPDATE, or DELETE statement.

2) ResultSet executeQuery (String SQL):
--------------------------------------
* Returns a ResultSet object.
* Use this method when you expect to get a result set.
* example:- SELECT query

3) boolean execute (String SQL):
---------------------------------------
* Returns true if resultset is retrieved
* Returns false is resultSet is not retrieved



//insert multiple rows -> just for reference
https://stackoverflow.com/questions/12012592/jdbc-insert-multiple-rows


What is JDBC?
JDBC stands for Java Database Connectivity. JDBC  is an API which helps java application to communicate with database.


JDBC Components
-------------
JDBC API consists of following interfaces and classes DriverManager, Driver, Connection, Statement, ResultSet, SQLException.

JDBC Driver
--------------------------

JDBC driver is an interface that enables a Java application to interact with a database. 
To connect with databases, JDBC requires drivers for each database. 
The JDBC driver has the implementation for transferring the query and result between client and database.

what is connetion in jdbc?
Connection interface consists of methods for contacting a database.

DriverManager.getCOnnection(url,userName,pwd);


What is a ResultSet?
-------------------------------
ResultSet holds the data retrieved from a database after you execute an SQL query using Statement objects.
You can iterate over the resultSet to get the data	

what are types of ResultSet?
----------------------------------------

3 types

ResultSet.TYPE_FORWARD_ONLY − The cursor can only move forward in the result set.

ResultSet.TYPE_SCROLL_INSENSITIVE − 
cursor can scroll forwards and backwards, and the result set is not sensitive to changes made by others to the database that occur after the result set was created.

ResultSet.TYPE_SCROLL_SENSITIVE − The cursor can scroll forwards and backwards, and the result set is sensitive to changes made by others to the database that occur after the result set was created.


Types of JDBC Drivers
-------------------------
There are four types of JDBC drivers

1)JDBC-ODBC Bridge  driver
2)Native-API
3)The Network Protocol
4)Native-protocol

JDBC-ODBC Bridge  driver:
->Also known as Type1 driver
-> This driver usses ODBC driver to connect to the database
-> This driver driver converts JDBC method calls into the ODBC function calls.
-> Type1 driver is not written in java	
-> This driver software is built-in with JDK so no need to install separately.

The Native API driver:
->Also known as Type2 driver
->This driver converts JDBC method calls into native calls of the database API
-> Type-2 driver isn’t written in java
-> This driver needs to be installed on the client side

The Network Protocol:
->Also known as Type3 driver
-> This driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol
-> fully written in java
->Not required toinstalled on client side

native protocol driver:
->Also known as Type4 driver and thin driver
-> This driver interact directly with database. It does not require any native database library
-> fully writter in java language 
-> not required of any installation



Steps to create JDBC Application
-------------------------------------
1. import required jdbc packages
2. Load/regiser the driver
3. Open the database connection with the url,username and password
4. execute the sql query using statement
5. Extract the data from the resultset if applicable
6. close the connection


Types of statements
------------------------
1. Statement
2. Prepared Statement
3. callable Statement


Difference betweeen statement and prepared statement
--------------------------------------------------
https://www.geeksforgeeks.org/difference-between-statement-and-preparedstatement/


execute, executeQuery and executeUpdate
-----------------------------------------------

1) int executeUpdate (String SQL):
-------------------------------------
* Returns the number of rows affected by the execution of the SQL statement.
* Use this method to execute SQL statements for which you expect to get a number of rows affected - for example, an INSERT, UPDATE, or DELETE statement.

2) ResultSet executeQuery (String SQL):
--------------------------------------
* Returns a ResultSet object.
* Use this method when you expect to get a result set.
* example:- SELECT query

3) boolean execute (String SQL):
---------------------------------------
* Returns true if resultset is retrieved
* Returns false is resultSet is not retrieved




https://www.youtube.com/watch?v=RJYxr7ThD00&list=PLV8vIYTIdSnb99DPBprW8ySecLRzHhNf4&index=2

https://www.youtube.com/watch?v=zNgbgWgBdNQ&list=PLVlQHNRLflP_kHVsiJVaU2s1HFpTRXIa4&index=5

short list
https://www.youtube.com/watch?v=MtFA3ByEcdE&list=PLVlQHNRLflP_kHVsiJVaU2s1HFpTRXIa4&index=10
















